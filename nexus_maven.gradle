//apply plugin: 'digital.wup.android-maven-publish'
apply plugin: 'maven'

afterEvaluate { project ->
    //上传到仓库指令
    uploadArchives {
        repositories.mavenDeployer {
            if (!project.hasProperty('NEXUS_URL')) {
                return
            }
            // 配置本地仓库路径，项目根目录下的repository目录中
            repository(url: "${NEXUS_URL}") {
                authentication(userName: "${NEXUS_USERNAME}", password: "${NEXUS_PASSWORD}")
            }
            pom.groupId = "com.gcard" // 唯一标识（通常为模块包名，也可以任意）
            pom.artifactId = "flutterboost" // 项目名称（通常为类库模块名称，也可以任意）
            pom.version = "${VERSION_NAME}" // 版本号
        }
    }

//    publishing {
//        //发布配置
//        publications {
//            android.libraryVariants.all { variant ->
//                "${variant.name.capitalize()}Aar"(MavenPublication) {
//                    from components.findByName("android${variant.name.capitalize()}")
//                    groupId 'com.gcard'
//                    artifactId "gcard-core"
//                    version "${VERSION_NAME}" + "-${variant.name}"
//
//                    artifact androidSourcesJar
////                    artifact androidJavadocsJar
//                }
//            }
//        }
//
//        //仓库配置
//        repositories {
//            maven {
//                name "Remote"
//                url "${NEXUS_URL}"
//                credentials {
//                    username = "${NEXUS_USERNAME}"
//                    password = "${NEXUS_PASSWORD}"
//                }
//            }
//        }
//    }

    // 进行数字签名
    //signing {
    //    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    //    sign configurations.archives
    //}

    //解决 JavaDoc 中文注释生成失败的问题
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }

    //javaDoc编码
    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        failOnError false// 忽略错误配置
    }

    //生成javadoc.jar
    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        archiveClassifier.set('javadoc')
        from androidJavadocs.destinationDir
    }

    //生成sources.jar
    task androidSourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives androidSourcesJar
    }
}
